function makeRectangle(topLeft, size, cornerSize, colour) { //Create the visual representation of the data node
    var rectangle = new Rectangle(topLeft, size);
    var corner = new Size(cornerSize, cornerSize); //Size object for corner radius
    var path = new Path.RoundRectangle(rectangle, corner);
    path.fillColor = colour;
    return path;
}

var r1 = makeRectangle(new Point(100, 200), new Size(100, 80), 8, "#167ee5");
var r2 = makeRectangle(new Point(700, 550), new Size(100, 80), 8, "#167ee5");

function makeButton(shape){
    var pos = shape.bounds.center;
    var width = shape.bounds.width;
    var height = shape.bounds.height;
    var cutter = new Path.Rectangle({
       point: pos,
       size: [width,height],
       fillColor: 'black',
    });
    cutter.rotation -= 45;
    var offset = shape.bounds.width/7;
    cutter.position += new Point({
        length: offset,
        angle: 45
    });
    var cut = shape.divide(cutter);
    cutter.remove();
    cut.children[1].bringToFront();
    cut.children[1].fillColor = '#44af76';
    cut.children[1].data.button = true;
    return cut;
}

var r1 = makeButton(r1);
var r2 = makeButton(r2);

var segment, path, newC;
var movePath = false;

function newConnection(shapeButton, event){
    var event = (event.point === undefined) ? new Point(shapeButton.bounds.bottomRight) : event;
    var newBound = new Rectangle(shapeButton.bounds.center, event.point);
    var h1 = newBound.leftCenter - shapeButton.bounds.center;
    var h2 = newBound.rightCenter - event.point;
    var seg1 = new Segment(shapeButton.bounds.center,null,h1);
    var seg2 = new Segment(event.point,h2,null);
    var newCon = new Path(seg1,seg2);
    newCon.strokeColor = 'black';
    newCon.sendToBack();

    this.update = function(event){
        newCon.segments[1].point = event.point;
    }

    this.destroy = function(hitResult){
        if (hitResult && hitResult.type == 'fill'){
            console.log('do connection shit here');
        }
        newCon.remove();
    }
}

var hitOptions = {
  segments: false,
  stroke: false,
  fill: true,
  tolerance: 5
}

function onMouseDown(event) {
  segment = path = null;
  var hitResult = project.hitTest(event.point, hitOptions);
  if (!hitResult)
    return;
  if (hitResult) {
    path = hitResult.item;
    //console.log(path.children);
    if (path.data.button){
        newC = new newConnection(path, event);
    }
    if (hitResult.type == 'segment') {
      segment = hitResult.segment;
    }
  }
  movePath = hitResult.type == 'fill';
  if (movePath)
    project.activeLayer.addChild(hitResult.item);
}

function onMouseUp(event) {
    var hitResult = project.hitTest(event.point, hitOptions);
    if(newC !== undefined) newC.destroy(hitResult);
}

function onMouseDrag(event) {
    if(newC !== undefined) newC.update(event);
}

